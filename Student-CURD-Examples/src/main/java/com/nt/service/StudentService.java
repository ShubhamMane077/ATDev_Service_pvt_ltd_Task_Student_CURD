package com.nt.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

import com.nt.entity.Student;
import com.nt.dao.StudentDao;
import com.nt.payloads.StudentRequestDto;
import com.nt.payloads.StudentResponseDto;

@Service
public class StudentService {

    @Autowired
    private StudentDao studentDao;

    public void addStudent(StudentRequestDto studentDto) {
        Student student = new Student();
        // Note: Assuming that the ID is generated by the database (auto-increment).
        // So, we don't set the ID explicitly here.
        student.setName(studentDto.getName());
        student.setBranch(studentDto.getBranch());
        student.setAge(studentDto.getAge());
        studentDao.save(student);
    }

    public List<StudentResponseDto> getAllStudents() {
        List<Student> students = studentDao.findAll();
        return students.stream()
                .map(this::convertToResponseDto)
                .collect(Collectors.toList());
    }

    public StudentResponseDto getStudentById(int id) {
        Student student = studentDao.findById(id).orElse(null);
        if (student != null) {
            return convertToResponseDto(student);
        }
        return null; // Or throw an exception or handle as per your application logic.
    }

    public void deleteStudentById(int id) {
        studentDao.deleteById(id);
    }

    private StudentResponseDto convertToResponseDto(Student student) {
        StudentResponseDto responseDto = new StudentResponseDto();
        responseDto.setStudentId(student.getStudentId());
        responseDto.setName(student.getName());
        responseDto.setBranch(student.getBranch());
        responseDto.setAge(student.getAge());
        return responseDto;
    }
    
    public void updateStudent(int id, StudentRequestDto studentDto) {
        Student existingStudent = studentDao.findById(id).orElse(null);

        if (existingStudent != null) {
            existingStudent.setName(studentDto.getName());
            existingStudent.setBranch(studentDto.getBranch());
            existingStudent.setAge(studentDto.getAge());

            studentDao.save(existingStudent);
        }
    }

}
